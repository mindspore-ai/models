# Device
device_target:     "GPU"
# ==============================================================================
# Dataset Setup
clip_length:       16                    # Number of frames within a clip
clip_offset:       0                     # Frame offset between beginning of video and clip (1st clip only)
clip_stride:       1                     # Frame offset between successive clips, must be >= 1
crop_shape:        [112,112]             # (Height, Width) of frame
crop_type:         Random                # Type of cropping operation (Random, Central and None)
final_shape:       [112,112]             # (Height, Width) of input to be given to CNN
num_clips:         -1                    # Number clips to be generated from a video (<0: uniform sampling, 0: Divide entire video into clips, >0: Defines number of clips)
random_offset:     0                     # Boolean switch to generate a clip length sized clip from a video
resize_shape:      [128,171]             # (Height, Width) to resize original data
subtract_mean:     ''                    # Subtract mean (R,G,B) from all frames during preprocessing
preprocess:        default               # String argument to select preprocessing type

# Experiment Setup
model:             C3D                   # Name of model to be loaded
acc_metric:        Accuracy              # Accuracy metric
batch_size:        8                    # Numbers of videos in a mini-batch
dataset:           UCF101                # Name of dataset
epoch:             150                   # Total number of epochs
gamma:             0.1                   # Multiplier with which to change learning rate
json_path:         ./ucf101/JSON         # Path to the json file for the given dataset
img_path:          ./ucf101/UCF-101_img  # Path to the img file for the given dataset
num_classes:       101                   # Number of total classes in the dataset
loss_type:         M_XENTROPY            # Loss function
lr:                0.000245                  # Learning rate
milestones:        [15, 30, 75]              # Epoch values to change learning rate
momentum:          0.9                   # Momentum value in optimizer
loss_scale:        1.0
num_workers:       4                     # Number of CPU worker used to load data
opt:               sgd                   # Name of optimizer
pre_trained:       1                     # Load pretrained network
save_dir:          ./results             # Path to results directory
seed:              666                   # Seed for reproducibility
weight_decay:      0.0005                # Weight decay
sport1m_mean_file_path: ./pretrained_model/sport1m_train16_128_mean.npy   # Path to sports1m pretrained model
pre_trained_ckpt_path: ./pretrained_model/c3d-pretrained.ckpt   # Path to c3d pretrained model
amp_level_diff:    O2                    #amp_level for gpu
enable_graph_kernel_diff: True           #enable_graph_kernel for gpu

# Train Setup
is_distributed:    0                     # Distributed training or not
is_evalcallback:   1                     # Using evalcallback or not
device_id:         0                     # Device id
ckpt_path:         ./result/ckpt         # Ckpt save path
ckpt_interval:     1                     # Saving ckpt interval
keep_checkpoint_max: 3                 # Max ckpt file number

# Modelarts Setup
enable_modelarts:  0                     # Is training on modelarts
result_url:        ''                    # Result save path
data_url:          ''                    # Data path
train_url:         ''                    # Train path

# Onnx infer
onnx_path:         ''                    # Onnx path

# Export Setup
ckpt_file:         './C3D.ckpt'          # Mindspore ckpt file path
mindir_file_name:  './C3D'               # Save file path
file_format:       'mindir'              # Save file format